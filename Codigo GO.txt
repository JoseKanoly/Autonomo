internal
  auth
    auth.go
package auth

import (
	"time"

	"github.com/golang-jwt/jwt"
)

var jwtKey = []byte("your_secret_key")

func GenerateToken(username string) (string, error) {
	token := jwt.New(jwt.SigningMethodHS256)
	claims := token.Claims.(jwt.MapClaims)

	claims["username"] = username
	claims["exp"] = time.Now().Add(time.Hour * 24).Unix()

	tokenString, err := token.SignedString(jwtKey)
	if err != nil {
		return "", err
	}

	return tokenString, nil
}

config
config.go
package config

import (
	"os"

	"github.com/joho/godotenv"
)

type Config struct {
	DatabaseURL string
	Port        string
	JWTSecret   string
}

func Load() (*Config, error) {
	if err := godotenv.Load(); err != nil {
		return nil, err
	}

	return &Config{
		DatabaseURL: os.Getenv("DATABASE_URL"),
		Port:        os.Getenv("PORT"),
		JWTSecret:   os.Getenv("JWT_SECRET"),
	}, nil
}

controllers
auth_controller
package controllers

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

type LoginRequest struct {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}

func Login(c *gin.Context) {
	var loginReq LoginRequest
	if err := c.ShouldBindJSON(&loginReq); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// Here you should verify the username and password
	// For this example, we'll just check if they're not empty
	if loginReq.Username == "" || loginReq.Password == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid credentials"})
		return
	}

	// For demonstration purposes, we're not generating a token
	c.JSON(http.StatusOK, gin.H{"message": "Login successful"})
}

lista_precios_controller
package controllers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"go_project/internal/models"
	"go_project/internal/services"
)

type ListaPreciosController struct {
	service *services.ListaPreciosService
}

func NewListaPreciosController(service *services.ListaPreciosService) *ListaPreciosController {
	return &ListaPreciosController{service: service}
}

func (c *ListaPreciosController) GetAll(ctx *gin.Context) {
	listaPrecios, err := c.service.GetAll()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, listaPrecios)
}

func (c *ListaPreciosController) GetByID(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	listaPrecio, err := c.service.GetByID(id)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{"error": "Lista de precios not found"})
		return
	}
	ctx.JSON(http.StatusOK, listaPrecio)
}

func (c *ListaPreciosController) Create(ctx *gin.Context) {
	var listaPrecio models.ListaPrecios
	if err := ctx.ShouldBindJSON(&listaPrecio); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if err := c.service.Create(&listaPrecio); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusCreated, listaPrecio)
}

func (c *ListaPreciosController) Update(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	var listaPrecio models.ListaPrecios
	if err := ctx.ShouldBindJSON(&listaPrecio); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	listaPrecio.ID = id
	if err := c.service.Update(&listaPrecio); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, listaPrecio)
}

func (c *ListaPreciosController) Delete(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	if err := c.service.Delete(id); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, gin.H{"message": "Lista de precios deleted successfully"})
}

residuos_controller
package controllers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"go_project/internal/models"
	"go_project/internal/services"
)

type ResiduosController struct {
	service *services.ResiduosService
}

func NewResiduosController(service *services.ResiduosService) *ResiduosController {
	return &ResiduosController{service: service}
}

func (c *ResiduosController) GetAll(ctx *gin.Context) {
	residuos, err := c.service.GetAll()
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, residuos)
}

func (c *ResiduosController) GetByID(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	residuo, err := c.service.GetByID(id)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{"error": "Residuo not found"})
		return
	}
	ctx.JSON(http.StatusOK, residuo)
}

func (c *ResiduosController) Create(ctx *gin.Context) {
	var residuo models.Residuo
	if err := ctx.ShouldBindJSON(&residuo); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if err := c.service.Create(&residuo); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusCreated, residuo)
}

func (c *ResiduosController) Update(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	var residuo models.Residuo
	if err := ctx.ShouldBindJSON(&residuo); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	residuo.ID = id
	if err := c.service.Update(&residuo); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, residuo)
}

func (c *ResiduosController) Delete(ctx *gin.Context) {
	id, err := strconv.Atoi(ctx.Param("id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	if err := c.service.Delete(id); err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, gin.H{"message": "Residuo deleted successfully"})
}

database
create_tables
package database

import (
	"database/sql"
	"log"
)

func CreateTables(db *sql.DB) error {
	createListaPreciosTable := `
	CREATE TABLE IF NOT EXISTS lista_precios (
		id SERIAL PRIMARY KEY,
		tipo_residuo TEXT NOT NULL,
		precio_por_kg DECIMAL(10, 2) NOT NULL
	);`

	createResiduosTable := `
	CREATE TABLE IF NOT EXISTS residuos (
		id SERIAL PRIMARY KEY,
		tipo TEXT NOT NULL,
		peso DECIMAL(10, 2) NOT NULL,
		fecha_recoleccion TIMESTAMP NOT NULL,
		empresa_id INTEGER NOT NULL
	);`

	_, err := db.Exec(createListaPreciosTable)
	if err != nil {
		log.Printf("Error creating lista_precios table: %v", err)
		return err
	}

	_, err = db.Exec(createResiduosTable)
	if err != nil {
		log.Printf("Error creating residuos table: %v", err)
		return err
	}

	log.Println("Tables created successfully")
	return nil
}


db.go
package database

import (
	"database/sql"

	_ "github.com/lib/pq"
)

func Connect(databaseURL string) (*sql.DB, error) {
	db, err := sql.Open("postgres", databaseURL)
	if err != nil {
		return nil, err
	}

	if err = db.Ping(); err != nil {
		return nil, err
	}

	return db, nil
}

graphql
   resolvers
    lista_precios_resolver.go
package resolvers

import (
	"github.com/graphql-go/graphql"

	"go_project/internal/models"
	"go_project/internal/services"
)

var listaPreciosType = graphql.NewObject(graphql.ObjectConfig{
	Name: "ListaPrecios",
	Fields: graphql.Fields{
		"id":            &graphql.Field{Type: graphql.Int},
		"tipo_residuo":  &graphql.Field{Type: graphql.String},
		"precio_por_kg": &graphql.Field{Type: graphql.Float},
	},
})

func GetListaPreciosQuery() *graphql.Field {
	return &graphql.Field{
		Type: graphql.NewList(listaPreciosType),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("listaPreciosService").(*services.ListaPreciosService)
			return service.GetAll()
		},
	}
}

func CreateListaPrecioMutation() *graphql.Field {
	return &graphql.Field{
		Type: listaPreciosType,
		Args: graphql.FieldConfigArgument{
			"tipo_residuo":  &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.String)},
			"precio_por_kg": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Float)},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("listaPreciosService").(*services.ListaPreciosService)
			listaPrecio := &models.ListaPrecios{
				TipoResiduo: p.Args["tipo_residuo"].(string),
				PrecioPorKg: p.Args["precio_por_kg"].(float64),
			}
			err := service.Create(listaPrecio)
			return listaPrecio, err
		},
	}
}

func UpdateListaPrecioMutation() *graphql.Field {
	return &graphql.Field{
		Type: listaPreciosType,
		Args: graphql.FieldConfigArgument{
			"id":            &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Int)},
			"tipo_residuo":  &graphql.ArgumentConfig{Type: graphql.String},
			"precio_por_kg": &graphql.ArgumentConfig{Type: graphql.Float},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("listaPreciosService").(*services.ListaPreciosService)
			id := p.Args["id"].(int)
			listaPrecio, err := service.GetByID(id)
			if err != nil {
				return nil, err
			}
			if tipoResiduo, ok := p.Args["tipo_residuo"].(string); ok {
				listaPrecio.TipoResiduo = tipoResiduo
			}
			if precioPorKg, ok := p.Args["precio_por_kg"].(float64); ok {
				listaPrecio.PrecioPorKg = precioPorKg
			}
			err = service.Update(listaPrecio)
			return listaPrecio, err
		},
	}
}

func DeleteListaPrecioMutation() *graphql.Field {
	return &graphql.Field{
		Type: graphql.Boolean,
		Args: graphql.FieldConfigArgument{
			"id": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Int)},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("listaPreciosService").(*services.ListaPreciosService)
			id := p.Args["id"].(int)
			err := service.Delete(id)
			return err == nil, err
		},
	}
}

residuos_resolver
package resolvers

import (
	"go_project/internal/models"
	"go_project/internal/services"
	"time"

	"github.com/graphql-go/graphql"
)

var residuoType = graphql.NewObject(graphql.ObjectConfig{
	Name: "Residuo",
	Fields: graphql.Fields{
		"id":                &graphql.Field{Type: graphql.Int},
		"tipo":              &graphql.Field{Type: graphql.String},
		"peso":              &graphql.Field{Type: graphql.Float},
		"fecha_recoleccion": &graphql.Field{Type: graphql.DateTime},
		"empresa_id":        &graphql.Field{Type: graphql.Int},
	},
})

func GetResiduosQuery() *graphql.Field {
	return &graphql.Field{
		Type: graphql.NewList(residuoType),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("residuosService").(*services.ResiduosService)
			return service.GetAll()
		},
	}
}

func CreateResiduoMutation() *graphql.Field {
	return &graphql.Field{
		Type: residuoType,
		Args: graphql.FieldConfigArgument{
			"tipo":              &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.String)},
			"peso":              &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Float)},
			"fecha_recoleccion": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.DateTime)},
			"empresa_id":        &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Int)},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("residuosService").(*services.ResiduosService)
			residuo := &models.Residuo{
				Tipo:             p.Args["tipo"].(string),
				Peso:             p.Args["peso"].(float64),
				FechaRecoleccion: p.Args["fecha_recoleccion"].(time.Time),
				EmpresaID:        p.Args["empresa_id"].(int),
			}
			err := service.Create(residuo)
			return residuo, err
		},
	}
}

func UpdateResiduoMutation() *graphql.Field {
	return &graphql.Field{
		Type: residuoType,
		Args: graphql.FieldConfigArgument{
			"id":                &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Int)},
			"tipo":              &graphql.ArgumentConfig{Type: graphql.String},
			"peso":              &graphql.ArgumentConfig{Type: graphql.Float},
			"fecha_recoleccion": &graphql.ArgumentConfig{Type: graphql.DateTime},
			"empresa_id":        &graphql.ArgumentConfig{Type: graphql.Int},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("residuosService").(*services.ResiduosService)
			id := p.Args["id"].(int)
			residuo, err := service.GetByID(id)
			if err != nil {
				return nil, err
			}
			if tipo, ok := p.Args["tipo"].(string); ok {
				residuo.Tipo = tipo
			}
			if peso, ok := p.Args["peso"].(float64); ok {
				residuo.Peso = peso
			}
			if fechaRecoleccion, ok := p.Args["fecha_recoleccion"].(time.Time); ok {
				residuo.FechaRecoleccion = fechaRecoleccion
			}
			if empresaID, ok := p.Args["empresa_id"].(int); ok {
				residuo.EmpresaID = empresaID
			}
			err = service.Update(residuo)
			return residuo, err
		},
	}
}

func DeleteResiduoMutation() *graphql.Field {
	return &graphql.Field{
		Type: graphql.Boolean,
		Args: graphql.FieldConfigArgument{
			"id": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.Int)},
		},
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			service := p.Context.Value("residuosService").(*services.ResiduosService)
			id := p.Args["id"].(int)
			err := service.Delete(id)
			return err == nil, err
		},
	}
}

schema
package graphql

import (
	"go_project/internal/graphql/resolvers"

	"github.com/graphql-go/graphql"
)

// Define root query
var rootQuery = graphql.NewObject(graphql.ObjectConfig{
	Name: "RootQuery",
	Fields: graphql.Fields{
		"listaPrecios": resolvers.GetListaPreciosQuery(),
		"residuos":     resolvers.GetResiduosQuery(),
	},
})

// Define root mutation
var rootMutation = graphql.NewObject(graphql.ObjectConfig{
	Name: "RootMutation",
	Fields: graphql.Fields{
		"createListaPrecio": resolvers.CreateListaPrecioMutation(),
		"updateListaPrecio": resolvers.UpdateListaPrecioMutation(),
		"deleteListaPrecio": resolvers.DeleteListaPrecioMutation(),
		"createResiduo":     resolvers.CreateResiduoMutation(),
		"updateResiduo":     resolvers.UpdateResiduoMutation(),
		"deleteResiduo":     resolvers.DeleteResiduoMutation(),
	},
})

// Create and export the schema
var Schema, _ = graphql.NewSchema(graphql.SchemaConfig{
	Query:    rootQuery,
	Mutation: rootMutation,
})


middleware
authpackage middleware

import (
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt"
)

func Auth() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Missing authorization header"})
			c.Abort()
			return
		}

		tokenString := strings.TrimPrefix(authHeader, "Bearer ")
		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			// Replace this with the actual secret key
			return []byte("your-secret-key-here"), nil
		})

		if err != nil || !token.Valid {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
			c.Abort()
			return
		}

		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token claims"})
			c.Abort()
			return
		}

		c.Set("user_id", claims["user_id"])
		c.Next()
	}
}

erro_handler
package middleware

import (
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

func ErrorHandler() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Next()

		if len(c.Errors) > 0 {
			for _, e := range c.Errors {
				log.Printf("Error: %v", e.Err)
			}

			c.JSON(http.StatusInternalServerError, gin.H{
				"errors": c.Errors.Errors(),
			})
		}
	}
}

logger
package middleware

import (
	"log"
	"time"

	"github.com/gin-gonic/gin"
)

func Logger() gin.HandlerFunc {
	return func(c *gin.Context) {
		start := time.Now()
		path := c.Request.URL.Path
		method := c.Request.Method

		c.Next()

		end := time.Now()
		latency := end.Sub(start)
		statusCode := c.Writer.Status()

		log.Printf("[%s] %s %s %d %v", method, path, c.ClientIP(), statusCode, latency)
	}
}

models
lista_precios
package models

type ListaPrecios struct {
	ID          int     `json:"id"`
	TipoResiduo string  `json:"tipo_residuo" validate:"required"`
	PrecioPorKg float64 `json:"precio_por_kg" validate:"required,gt=0"`
}

residuos
package models

import "time"

type Residuo struct {
	ID               int       `json:"id"`
	Tipo             string    `json:"tipo" validate:"required"`
	Peso             float64   `json:"peso" validate:"required,gt=0"`
	FechaRecoleccion time.Time `json:"fecha_recoleccion" validate:"required"`
	EmpresaID        int       `json:"empresa_id" validate:"required"`
}

repository

lista_precios_repository
package repository

import (
	"database/sql"

	"go_project/internal/models"
)

type ListaPreciosRepository struct {
	db *sql.DB
}

func NewListaPreciosRepository(db *sql.DB) *ListaPreciosRepository {
	return &ListaPreciosRepository{db: db}
}

func (r *ListaPreciosRepository) GetAll() ([]models.ListaPrecios, error) {
	rows, err := r.db.Query("SELECT id, tipo_residuo, precio_por_kg FROM lista_precios")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var listaPrecios []models.ListaPrecios
	for rows.Next() {
		var lp models.ListaPrecios
		if err := rows.Scan(&lp.ID, &lp.TipoResiduo, &lp.PrecioPorKg); err != nil {
			return nil, err
		}
		listaPrecios = append(listaPrecios, lp)
	}

	return listaPrecios, nil
}

func (r *ListaPreciosRepository) GetByID(id int) (*models.ListaPrecios, error) {
	var lp models.ListaPrecios
	err := r.db.QueryRow("SELECT id, tipo_residuo, precio_por_kg FROM lista_precios WHERE id = $1", id).
		Scan(&lp.ID, &lp.TipoResiduo, &lp.PrecioPorKg)
	if err != nil {
		return nil, err
	}
	return &lp, nil
}

func (r *ListaPreciosRepository) Create(lp *models.ListaPrecios) error {
	err := r.db.QueryRow("INSERT INTO lista_precios (tipo_residuo, precio_por_kg) VALUES ($1, $2) RETURNING id",
		lp.TipoResiduo, lp.PrecioPorKg).Scan(&lp.ID)
	return err
}

func (r *ListaPreciosRepository) Update(lp *models.ListaPrecios) error {
	_, err := r.db.Exec("UPDATE lista_precios SET tipo_residuo = $1, precio_por_kg = $2 WHERE id = $3",
		lp.TipoResiduo, lp.PrecioPorKg, lp.ID)
	return err
}

func (r *ListaPreciosRepository) Delete(id int) error {
	_, err := r.db.Exec("DELETE FROM lista_precios WHERE id = $1", id)
	return err
}

residuos_repository
package repository

import (
	"database/sql"

	"go_project/internal/models"
)

type ResiduosRepository struct {
	db *sql.DB
}

func NewResiduosRepository(db *sql.DB) *ResiduosRepository {
	return &ResiduosRepository{db: db}
}

func (r *ResiduosRepository) GetAll() ([]models.Residuo, error) {
	rows, err := r.db.Query("SELECT id, tipo, peso, fecha_recoleccion, empresa_id FROM residuos")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var residuos []models.Residuo
	for rows.Next() {
		var res models.Residuo
		if err := rows.Scan(&res.ID, &res.Tipo, &res.Peso, &res.FechaRecoleccion, &res.EmpresaID); err != nil {
			return nil, err
		}
		residuos = append(residuos, res)
	}

	return residuos, nil
}

func (r *ResiduosRepository) GetByID(id int) (*models.Residuo, error) {
	var res models.Residuo
	err := r.db.QueryRow("SELECT id, tipo, peso, fecha_recoleccion, empresa_id FROM residuos WHERE id = $1", id).
		Scan(&res.ID, &res.Tipo, &res.Peso, &res.FechaRecoleccion, &res.EmpresaID)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

func (r *ResiduosRepository) Create(res *models.Residuo) error {
	err := r.db.QueryRow("INSERT INTO residuos (tipo, peso, fecha_recoleccion, empresa_id) VALUES ($1, $2, $3, $4) RETURNING id",
		res.Tipo, res.Peso, res.FechaRecoleccion, res.EmpresaID).Scan(&res.ID)
	return err
}

func (r *ResiduosRepository) Update(res *models.Residuo) error {
	_, err := r.db.Exec("UPDATE residuos SET tipo = $1, peso = $2, fecha_recoleccion = $3, empresa_id = $4 WHERE id = $5",
		res.Tipo, res.Peso, res.FechaRecoleccion, res.EmpresaID, res.ID)
	return err
}

func (r *ResiduosRepository) Delete(id int) error {
	_, err := r.db.Exec("DELETE FROM residuos WHERE id = $1", id)
	return err
}

routes
lista_precios_routes
package routes

import (
	"github.com/gin-gonic/gin"

	"go_project/internal/controllers"
)

func RegisterListaPreciosRoutes(r *gin.RouterGroup, c *controllers.ListaPreciosController) {
	listaPrecios := r.Group("/listas_precios")
	{
		listaPrecios.GET("", c.GetAll)
		listaPrecios.GET("/:id", c.GetByID)
		listaPrecios.POST("", c.Create)
		listaPrecios.PUT("/:id", c.Update)
		listaPrecios.DELETE("/:id", c.Delete)
	}
}

residuos_routes
package routes

import (
	"github.com/gin-gonic/gin"

	"go_project/internal/controllers"
)

func RegisterResiduosRoutes(r *gin.RouterGroup, c *controllers.ResiduosController) {
	residuos := r.Group("/residuos")
	{
		residuos.GET("", c.GetAll)
		residuos.GET("/:id", c.GetByID)
		residuos.POST("", c.Create)
		residuos.PUT("/:id", c.Update)
		residuos.DELETE("/:id", c.Delete)
	}
}

routes
package routes

import (
	"database/sql"

	"github.com/gin-gonic/gin"

	"go_project/internal/controllers"
	"go_project/internal/repository"
	"go_project/internal/services"
)

func RegisterRoutes(r *gin.RouterGroup, db *sql.DB) {
	listaPreciosRepo := repository.NewListaPreciosRepository(db)
	listaPreciosService := services.NewListaPreciosService(listaPreciosRepo)
	listaPreciosController := controllers.NewListaPreciosController(listaPreciosService)

	residuosRepo := repository.NewResiduosRepository(db)
	residuosService := services.NewResiduosService(residuosRepo)
	residuosController := controllers.NewResiduosController(residuosService)

	r.POST("/login", controllers.Login)

	RegisterListaPreciosRoutes(r, listaPreciosController)
	RegisterResiduosRoutes(r, residuosController)
}

services
lista_precios_service
package services

import (
	"go_project/internal/models"
	"go_project/internal/repository"
)

type ListaPreciosService struct {
	repo *repository.ListaPreciosRepository
}

func NewListaPreciosService(repo *repository.ListaPreciosRepository) *ListaPreciosService {
	return &ListaPreciosService{repo: repo}
}

func (s *ListaPreciosService) GetAll() ([]models.ListaPrecios, error) {
	return s.repo.GetAll()
}

func (s *ListaPreciosService) GetByID(id int) (*models.ListaPrecios, error) {
	return s.repo.GetByID(id)
}

func (s *ListaPreciosService) Create(lp *models.ListaPrecios) error {
	return s.repo.Create(lp)
}

func (s *ListaPreciosService) Update(lp *models.ListaPrecios) error {
	return s.repo.Update(lp)
}

func (s *ListaPreciosService) Delete(id int) error {
	return s.repo.Delete(id)
}

residuos_service
package services

import (
	"go_project/internal/models"
	"go_project/internal/repository"
)

type ResiduosService struct {
	repo *repository.ResiduosRepository
}

func NewResiduosService(repo *repository.ResiduosRepository) *ResiduosService {
	return &ResiduosService{repo: repo}
}

func (s *ResiduosService) GetAll() ([]models.Residuo, error) {
	return s.repo.GetAll()
}

func (s *ResiduosService) GetByID(id int) (*models.Residuo, error) {
	return s.repo.GetByID(id)
}

func (s *ResiduosService) Create(residuo *models.Residuo) error {
	return s.repo.Create(residuo)
}

func (s *ResiduosService) Update(residuo *models.Residuo) error {
	return s.repo.Update(residuo)
}

func (s *ResiduosService) Delete(id int) error {
	return s.repo.Delete(id)
}

websocket
handler
package websocket

import (
	"log"
	"net/http"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

var clients = make(map[*websocket.Conn]bool)
var broadcast = make(chan []byte)

func HandleConnections(w http.ResponseWriter, r *http.Request) {
	ws, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer ws.Close()

	clients[ws] = true

	for {
		_, msg, err := ws.ReadMessage()
		if err != nil {
			delete(clients, ws)
			break
		}
		broadcast <- msg
	}
}

func HandleMessages() {
	for {
		msg := <-broadcast
		for client := range clients {
			err := client.WriteMessage(websocket.TextMessage, msg)
			if err != nil {
				log.Printf("error: %v", err)
				client.Close()
				delete(clients, client)
			}
		}
	}
}

.env
DATABASE_URL="postgresql://neondb_owner:3Db8BeJsXLcw@ep-dark-term-a5oonqb7.us-east-2.aws.neon.tech/prisma_migrate_shadow_db_53b15455-8cfc-471d-ac69-0e3320a75b8f?sslmode=require"
PORT=8081
JWT_SECRET="your-secret-key-here"

main
package main

import (
	"log"

	"github.com/gin-gonic/gin"
	"github.com/graphql-go/handler"

	"go_project/internal/config"
	"go_project/internal/database"
	"go_project/internal/graphql"
	"go_project/internal/routes"
	"go_project/internal/websocket"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Error loading configuration: %v", err)
	}

	// Initialize the router
	r := gin.Default()

	// Enable CORS
	r.Use(func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}
		c.Next()
	})

	// Connect to the database and create tables
	db, err := database.Connect(cfg.DatabaseURL)
	if err != nil {
		log.Fatalf("Error connecting to database: %v", err)
	}
	defer db.Close()

	// Create tables if they don't exist
	if err := database.CreateTables(db); err != nil {
		log.Fatalf("Error creating tables: %v", err)
	}

	// Initialize routes
	api := r.Group("/api")
	routes.RegisterRoutes(api, db)

	// GraphQL setup with playground
	h := handler.New(&handler.Config{
		Schema:     &graphql.Schema,
		Pretty:     true,
		GraphiQL:   true, // Enable the GraphiQL interface
		Playground: true, // Enable the Playground interface
	})

	// Handle both GET and POST for GraphQL
	r.Any("/graphql", func(c *gin.Context) {
		h.ServeHTTP(c.Writer, c.Request)
	})

	// WebSocket setup
	r.GET("/ws", gin.WrapF(websocket.HandleConnections))
	go websocket.HandleMessages()

	// Start the server
	log.Printf("Server starting on port %s", cfg.Port)
	if err := r.Run(":" + cfg.Port); err != nil {
		log.Fatalf("Error starting server: %v", err)
	}
}
